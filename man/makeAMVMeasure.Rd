% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Make_measure_AMV.R
\name{makeAMVMeasure}
\alias{makeAMVMeasure}
\title{Creates the measure Area under the Mass-Volume Curve (AMV) for Anomaly detection (oneclass) for data dimension less than 8}
\usage{
makeAMVMeasure(id = "AMV", minimize = TRUE, alphas = c(0.9, 0.99),
  n.alpha = 50, n.sim = 1000, best = 0, worst = NULL, name = id,
  note = "")
}
\arguments{
\item{id}{\link{\code{character(1)}}\cr
Name of measure. Note: need to keep the string "AMV" in the ID if doing nested resampling.
Default is \dQuote{AMV}.}

\item{minimize}{(`logical(1)`)\cr
Should the measure be minimized?
Default is `TRUE`.}

\item{alphas}{\link{\code{numeric}} \cr
Numeric vector of alphas, which lies in [0, 1), representing the computed quantiles.
Default: lower quantile alpha1 = 0.9, upper quantile alpha2 = 0.99 as we are interested in the performance of the scoring function in the the low density regions.}

\item{n.alpha}{\link{\code{numeric}} \cr
Numeric discretization parameter greater than one, which splits the intervall of alpha1 and alpha2 as follows: {alpha1 + j * (alpha2-alpha1)/(n.alpha-1), j element of {0,...,n.alpha-1}}, Default: n.alpha = 50.}

\item{n.sim}{\link{\code{numeric(1)}} \cr
Number of Monte-Carlo Samples, Default is 10^3.}

\item{best}{(`numeric(1)`)\cr
Best obtainable value for measure.
Default is -`Inf` or `Inf`, depending on `minimize`.}

\item{worst}{(`numeric(1)`)\cr
Worst obtainable value for measure.
Default is `Inf` or -`Inf`, depending on `minimize`.}

\item{name}{([character]) \cr
Name of the measure. Default is `id`.}

\item{note}{([character]) \cr
Description and additional notes for the measure. Default is \dQuote{}.}
}
\value{
\link{\code{numeric(1)}}
Area under the Mass-Volume Curve (AMV).

[Measure].
}
\description{
Creates a measure for oneclass classification. The measure computes the
Area under the Mass-Volume Curve via Monte-Carlo approximation
of the diagonal. It uses the trapezoidal rule as implemented in
package \code{caTools} for integration. As AMV is based in a Monte-Carlo approximation
the curse of dimensionality applies for high dimensional data
(here: dimension greater than eight, see \code{makeAMVhdMeasure}).
The implementation is based on the python implementation:
https://github.com/albertcthomas/anomaly_tuning.
The difference is the type of quantile used, as the python default is not
available in R.
Note: prediction object must have \code{pred.type = 'prob'}
}
\examples{
# create an AMV measure which calculates the area under the Mass-Volume curve
#between 0.8 and 0.99 with 50 steps.
AMV = makeAMVMeasure(id = "AMV", minimize = TRUE, alphas = c(0.8, 0.99),
n.alpha = 50, n.sim = 10e3, best = 0, worst = NULL)

data = getTaskData(oneclass2d.task)
inds.split = BBmisc::chunk(seq_len(nrow(data)), shuffle = TRUE, props = c(0.6, 0.4))
train.inds = inds.split[[1]]
test.inds = inds.split[[2]]
lrn = makeLearner("oneclass.svm", predict.type = "prob")
mod = train(lrn, oneclass2d.task, subset = train.inds)
pred = predict(mod, oneclass2d.task, subset = test.inds)

# calculate performance for prediction object, pass data of features used for
# prediction as feats in performance
performance(pred = pred, measures = list(AMV), model = mod, task = oneclass2d.task)
}
\references{
Thomas, A. et al. Learning Hyperparameters for Unsupervised Anomaly Detection,
ICML Anomaly Detection Workshop 2016
}
\seealso{
Other performance.: \code{\link{makeAMVhdMeasure}},
  \code{\link{makePrecisionMeasure}},
  \code{\link{makeWACMeasure}}
}
